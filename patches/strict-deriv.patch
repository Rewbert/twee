diff -r 34e79ed14c61 src/Twee.hs
--- a/src/Twee.hs	Sat Feb 20 18:20:52 2021 +0100
+++ b/src/Twee.hs	Sun Feb 21 00:23:37 2021 +0100
@@ -576,7 +576,7 @@
     backwardsMap m =
       Map.fromList $
         Map.toList m ++
-        [ (ruleResult t r, p `Proof.trans` q)
+        [ (ruleResult t r, p `Proof.Trans` q)
         | (t, p) <- Map.toList m,
           r <- backwardsTerm t,
           let q = ruleProof t r ]
@@ -720,12 +720,12 @@
       -- Strict so that we check the proof before returning a solution
       !p =
         Proof.certify $
-          expandedProof goal_expanded_lhs t `Proof.trans`
-          Proof.symm (expandedProof goal_expanded_rhs u)
+          expandedProof goal_expanded_lhs t `Proof.Trans`
+          Proof.Symm (expandedProof goal_expanded_rhs u)
   return (provedGoal goal_number goal_name p)
   where
     expandedProof m (t, red) =
-      m Map.! t `Proof.trans` reductionProof t red
+      m Map.! t `Proof.Trans` reductionProof t red
 
 -- Return all current rewrite rules.
 {-# INLINEABLE rules #-}
diff -r 34e79ed14c61 src/Twee/CP.hs
--- a/src/Twee/CP.hs	Sat Feb 20 18:20:52 2021 +0100
+++ b/src/Twee/CP.hs	Sun Feb 21 00:23:37 2021 +0100
@@ -265,7 +265,7 @@
         cp_eqn   = r :=: l',
         cp_depth = cp_depth,
         cp_top   = eraseExcept (vars r) cp_top,
-        cp_proof = Proof.symm (eraseExcept (vars r) cp_proof) }
+        cp_proof = Proof.Symm (eraseExcept (vars r) cp_proof) }
     | ord == Just LT ] ++
     [ CriticalPair {
         cp_eqn   = l' :=: r',
@@ -279,13 +279,13 @@
         cp_eqn   = l :=: l',
         cp_depth = cp_depth + 1,
         cp_top   = Nothing,
-        cp_proof = cp_proof `Proof.trans` Proof.symm (erase ls cp_proof) }
+        cp_proof = cp_proof `Proof.Trans` Proof.Symm (erase ls cp_proof) }
     | not (null ls), ord /= Just GT ] ++
     [ CriticalPair {
         cp_eqn   = r :=: r',
         cp_depth = cp_depth + 1,
         cp_top   = Nothing,
-        cp_proof = Proof.symm cp_proof `Proof.trans` erase rs cp_proof }
+        cp_proof = Proof.Symm cp_proof `Proof.Trans` erase rs cp_proof }
     | not (null rs), ord /= Just LT ]
     where
       ord = orientTerms l' r'
@@ -315,8 +315,8 @@
   (Has a (Rule f), Has a Id) =>
   a -> a -> Overlap f -> Derivation f
 overlapProof left right Overlap{..} =
-  Proof.symm (ruleDerivation (subst leftSub (the left)))
-  `Proof.trans`
+  Proof.Symm (ruleDerivation (subst leftSub (the left)))
+  `Proof.Trans`
   congPath path overlap_top (ruleDerivation (subst rightSub (the right)))
   where
     Just leftSub = match (lhs (the left)) overlap_top
diff -r 34e79ed14c61 src/Twee/Join.hs
--- a/src/Twee/Join.hs	Sat Feb 20 18:20:52 2021 +0100
+++ b/src/Twee/Join.hs	Sun Feb 21 00:23:37 2021 +0100
@@ -132,8 +132,8 @@
     Just cp {
       cp_eqn = eqn,
       cp_proof =
-        Proof.symm (reductionProof lhs lred) `Proof.trans`
-        cp_proof `Proof.trans`
+        Proof.Symm (reductionProof lhs lred) `Proof.Trans`
+        cp_proof `Proof.Trans`
         reductionProof rhs rred }
   where
     lred = reduce lhs rhs
diff -r 34e79ed14c61 src/Twee/Proof.hs
--- a/src/Twee/Proof.hs	Sat Feb 20 18:20:52 2021 +0100
+++ b/src/Twee/Proof.hs	Sun Feb 21 00:23:37 2021 +0100
@@ -5,7 +5,7 @@
   Proof, Derivation(..), Axiom(..),
   certify, equation, derivation,
   -- ** Smart constructors for derivations
-  lemma, autoSubst, simpleLemma, axiom, symm, trans, cong, congPath,
+  lemma, autoSubst, simpleLemma, axiom, congPath,
 
   -- * Analysing proofs
   simplify, steps, usedLemmas, usedAxioms, usedLemmasAndSubsts, usedAxiomsAndSubsts,
@@ -140,9 +140,9 @@
   subst_ sub (UseLemma lemma s) = UseLemma lemma (subst_ sub s)
   subst_ sub (UseAxiom axiom s) = UseAxiom axiom (subst_ sub s)
   subst_ sub (Refl t) = Refl (subst_ sub t)
-  subst_ sub (Symm p) = symm (subst_ sub p)
-  subst_ sub (Trans p q) = trans (subst_ sub p) (subst_ sub q)
-  subst_ sub (Cong f ps) = cong f (subst_ sub ps)
+  subst_ sub (Symm p) = Symm (subst_ sub p)
+  subst_ sub (Trans p q) = Trans (subst_ sub p) (subst_ sub q)
+  subst_ sub (Cong f ps) = Cong f (subst_ sub ps)
 
 instance Function f => Pretty (Proof f) where
   pPrint = pPrintLemma defaultConfig (prettyShow . axiom_number) (prettyShow . equation)
diff -r 34e79ed14c61 src/Twee/Rule.hs
--- a/src/Twee/Rule.hs	Sat Feb 20 18:20:52 2021 +0100
+++ b/src/Twee/Rule.hs	Sun Feb 21 00:23:37 2021 +0100
@@ -166,7 +166,7 @@
 
 -- | Flip an unoriented rule so that it goes right-to-left.
 backwards :: Rule f -> Rule f
-backwards (Rule or d t u) = Rule (back or) (Proof.symm d) u t
+backwards (Rule or d t u) = Rule (back or) (Proof.Symm d) u t
   where
     back (Permutative xs) = Permutative (map swap xs)
     back Unoriented = Unoriented
@@ -239,7 +239,7 @@
   where
     red _ p [] = p
     red t p (q:qs) =
-      red (ruleResult t q) (p `Proof.trans` ruleProof t q) qs
+      red (ruleResult t q) (p `Proof.Trans` ruleProof t q) qs
 
 -- Helpers for result and reductionProof.
 ruleResult :: Term f -> Rule f -> Term f
@@ -250,7 +250,7 @@
   | t == lhs = d
   | len t < len lhs = Proof.Refl t
 ruleProof (App f ts) rule =
-  Proof.cong f [ruleProof u rule | u <- unpack ts]
+  Proof.Cong f [ruleProof u rule | u <- unpack ts]
 ruleProof t _ = Proof.Refl t
 
 --------------------------------------------------------------------------------
