diff -r f9e79bc89c99 src/Twee.hs
--- a/src/Twee.hs	Sun Jul 11 16:26:15 2021 +0200
+++ b/src/Twee.hs	Sun Jul 18 15:05:59 2021 +0200
@@ -176,14 +176,8 @@
 
 data Params
 instance Queue.Params Params where
-  type Score Params = Int
+  type Score Params = Int32
   type Id Params = Id
-  type PackedId Params = Int32
-  type PackedScore Params = Int32
-  packScore _ = fromIntegral
-  unpackScore _ = fromIntegral
-  packId _ = fromIntegral
-  unpackId _ = fromIntegral
 
 -- | Compute all critical pairs from a rule.
 {-# INLINEABLE makePassives #-}
@@ -205,7 +199,7 @@
     passive_score = fromIntegral (score cfg_critical_pairs depth overlap),
     passive_rule1 = active_id overlap_rule1,
     passive_rule2 = active_id overlap_rule2,
-    passive_pos   = packHow overlap_how }
+    passive_pos   = fromIntegral (packHow overlap_how) }
   where
     depth = succ (the overlap_rule1 `max` the overlap_rule2)
 
@@ -216,7 +210,7 @@
 findPassive State{..} Passive{..} = do
   rule1 <- IntMap.lookup (fromIntegral passive_rule1) st_active_set
   rule2 <- IntMap.lookup (fromIntegral passive_rule2) st_active_set
-  overlapAt (unpackHow passive_pos) rule1 rule2
+  overlapAt (unpackHow (fromIntegral passive_pos)) rule1 rule2
     (renameAvoiding (the rule2 :: Rule f) (the rule1)) (the rule2)
 
 -- | Renormalise a queued Passive.
diff -r f9e79bc89c99 src/Twee/Base.hs
--- a/src/Twee/Base.hs	Sun Jul 11 16:26:15 2021 +0200
+++ b/src/Twee/Base.hs	Sun Jul 18 15:05:59 2021 +0200
@@ -28,10 +28,11 @@
 import Data.List hiding (singleton)
 import Data.Maybe
 import qualified Data.IntMap.Strict as IntMap
+import Data.Serialize
 
 -- | Represents a unique identifier (e.g., for a rule).
 newtype Id = Id { unId :: Int32 }
-  deriving (Eq, Ord, Show, Enum, Bounded, Num, Real, Integral)
+  deriving (Eq, Ord, Show, Enum, Bounded, Num, Real, Integral, Serialize)
 
 instance Pretty Id where
   pPrint = text . show . unId
diff -r f9e79bc89c99 src/Twee/PassiveQueue.hs
--- a/src/Twee/PassiveQueue.hs	Sun Jul 11 16:26:15 2021 +0200
+++ b/src/Twee/PassiveQueue.hs	Sun Jul 18 15:05:59 2021 +0200
@@ -1,5 +1,5 @@
 -- | A queue of passive critical pairs, using a memory-efficient representation.
-{-# LANGUAGE TypeFamilies, RecordWildCards, FlexibleContexts, ScopedTypeVariables, StandaloneDeriving #-}
+{-# LANGUAGE TypeFamilies, RecordWildCards, FlexibleContexts, ScopedTypeVariables, StandaloneDeriving, DeriveGeneric #-}
 module Twee.PassiveQueue(
   Params(..),
   Queue,
@@ -7,35 +7,25 @@
   empty, insert, removeMin, mapMaybe, toList, queueSize) where
 
 import qualified Data.Heap as Heap
-import qualified Data.Vector.Unboxed as Vector
 import Data.Int
 import Data.List hiding (insert)
 import qualified Data.Maybe
 import Data.Ord
 import Data.Proxy
 import Twee.Utils
+import Data.Serialize
+import qualified Data.ByteString as BS
+import Data.ByteString(ByteString)
+import GHC.Generics
+import Data.Either
 
 -- | A datatype representing all the type parameters of the queue.
-class (Eq (Id params), Integral (Id params), Ord (Score params), Vector.Unbox (PackedScore params), Vector.Unbox (PackedId params)) => Params params where
+class (Eq (Id params), Integral (Id params), Ord (Score params), Serialize (Id params), Serialize (Score params)) => Params params where
   -- | The score assigned to critical pairs. Smaller scores are better.
   type Score params
   -- | The type of ID numbers used to name rules.
   type Id params
 
-  -- | A 'Score' packed for storage into a 'Vector.Vector'. Must be an instance of 'Vector.Unbox'.
-  type PackedScore params
-  -- | An 'Id' packed for storage into a 'Vector.Vector'. Must be an instance of 'Vector.Unbox'.
-  type PackedId params
-
-  -- | Pack a 'Score'.
-  packScore :: proxy params -> Score params -> PackedScore params
-  -- | Unpack a 'PackedScore'.
-  unpackScore :: proxy params -> PackedScore params -> Score params
-  -- | Pack an 'Id'.
-  packId :: proxy params -> Id params -> PackedId params
-  -- | Unpack a 'PackedId'.
-  unpackId :: proxy params -> PackedId params -> Id params
-
 -- | A critical pair queue.
 newtype Queue params =
   Queue (Heap.Heap (PassiveSet params))
@@ -45,93 +35,74 @@
   PassiveSet {
     passiveset_best  :: {-# UNPACK #-} !(Passive params),
     passiveset_rule  :: !(Id params),
-    -- CPs where the rule is the left-hand rule
-    passiveset_left  :: {-# UNPACK #-} !(Vector.Vector (PackedScore params, PackedId params, Int32)),
-    -- CPs where the rule is the right-hand rule
-    passiveset_right :: {-# UNPACK #-} !(Vector.Vector (PackedScore params, PackedId params, Int32)) }
+    passiveset_rest  :: {-# UNPACK #-} !(Passives params) }
 instance Params params => Eq (PassiveSet params) where
   x == y = compare x y == EQ
 instance Params params => Ord (PassiveSet params) where
   compare = comparing passiveset_best
 
+data Passives params =
+  Passives {-# UNPACK #-} !Int {-# UNPACK #-} !ByteString
+
+nullPassives :: Passives params -> Bool
+nullPassives (Passives 0 _) = True
+nullPassives _ = False
+
+passivesSize :: Passives params -> Int
+passivesSize (Passives n _) = n
+
+{-# INLINEABLE packPassives #-}
+packPassives :: Params params => [Passive params] -> Passives params
+packPassives ps =
+  Passives (length ps) (runPut (mapM_ put ps))
+
+{-# INLINEABLE unconsPassives #-}
+unconsPassives :: Params params => Passives params -> Maybe (Passive params, Passives params)
+unconsPassives (Passives 0 _) = Nothing
+unconsPassives (Passives n bs) =
+  case runGetState get bs 0 of
+    Left err -> error ("unconsPassives: " ++ err)
+    Right (x, rest) -> Just (x, Passives (n-1) rest)
+
+{-# INLINEABLE unpackPassives #-}
+unpackPassives :: Params params => Passives params -> [Passive params]
+unpackPassives = unfoldr unconsPassives
+
 -- A smart-ish constructor.
 {-# INLINEABLE mkPassiveSet #-}
 mkPassiveSet ::
   Params params =>
-  Proxy params ->
   Id params ->
-  Vector.Vector (PackedScore params, PackedId params, Int32) ->
-  Vector.Vector (PackedScore params, PackedId params, Int32) ->
+  Passives params ->
   Maybe (PassiveSet params)
-mkPassiveSet proxy rule left right
-  | Vector.null left && Vector.null right = Nothing
-  | not (Vector.null left) &&
-    (Vector.null right || l <= r) =
-    Just PassiveSet {
-      passiveset_best  = l,
-      passiveset_rule  = rule,
-      passiveset_left  = Vector.tail left,
-      passiveset_right = right }
-    -- In this case we must have not (Vector.null right).
-  | otherwise =
-    Just PassiveSet {
-      passiveset_best  = r,
-      passiveset_rule  = rule,
-      passiveset_left  = left,
-      passiveset_right = Vector.tail right }
-  where
-    l = unpack proxy rule True (Vector.head left)
-    r = unpack proxy rule False (Vector.head right)
-
--- Unpack a triple into a Passive.
-{-# INLINEABLE unpack #-}
-unpack :: Params params => Proxy params -> Id params -> Bool -> (PackedScore params, PackedId params, Int32) -> Passive params
-unpack proxy rule isLeft (score, id, pos) =
-  Passive {
-    passive_score = unpackScore proxy score,
-    passive_rule1 = if isLeft then rule else rule',
-    passive_rule2 = if isLeft then rule' else rule,
-    passive_pos = fromIntegral pos }
-  where
-    rule' = unpackId proxy id
+mkPassiveSet rule passives =
+  case unconsPassives passives of
+    Nothing -> Nothing
+    Just (hd, tl) ->
+      Just PassiveSet {
+        passiveset_best  = hd,
+        passiveset_rule  = rule,
+        passiveset_rest  = tl }
 
 -- Make a PassiveSet from a list of Passives.
 {-# INLINEABLE makePassiveSet #-}
 makePassiveSet :: forall params. Params params => Id params -> [Passive params] -> Maybe (PassiveSet params)
 makePassiveSet _ [] = Nothing
-makePassiveSet rule ps
-  | and [passive_rule2 p == rule | p <- right] =
-    mkPassiveSet proxy rule
-      (Vector.fromList (map (pack True) (sort left)))
-      (Vector.fromList (map (pack False) (sort right)))
-  | otherwise = error "rule id does not occur in passive"
-  where
-    proxy :: Proxy params
-    proxy = Proxy
+makePassiveSet rule ps =
+  mkPassiveSet rule (packPassives (sort ps))
     
-    (left, right) = partition (\p -> passive_rule1 p == rule) ps
-    pack isLeft Passive{..} =
-      (packScore proxy passive_score,
-       packId proxy (if isLeft then passive_rule2 else passive_rule1),
-       fromIntegral passive_pos)
-
 -- Convert a PassiveSet back into a list of Passives.
 {-# INLINEABLE unpackPassiveSet #-}
 unpackPassiveSet :: forall params.Params params => PassiveSet params -> (Int, [Passive params])
 unpackPassiveSet PassiveSet{..} =
-  (1 + Vector.length passiveset_left + Vector.length passiveset_right,
-   passiveset_best:
-   map (unpack proxy passiveset_rule True) (Vector.toList passiveset_left) ++
-   map (unpack proxy passiveset_rule False) (Vector.toList passiveset_right))
-  where
-    proxy :: Proxy params
-    proxy = Proxy
+  (1 + passivesSize passiveset_rest,
+   passiveset_best:unpackPassives passiveset_rest)
 
 -- Find and remove the best element from a PassiveSet.
 {-# INLINEABLE unconsPassiveSet #-}
 unconsPassiveSet :: forall params. Params params => PassiveSet params -> (Passive params, Maybe (PassiveSet params))
 unconsPassiveSet PassiveSet{..} =
-  (passiveset_best, mkPassiveSet (Proxy :: Proxy params) passiveset_rule passiveset_left passiveset_right)
+  (passiveset_best, mkPassiveSet passiveset_rule passiveset_rest)
 
 -- | A queued critical pair.
 data Passive params =
@@ -143,7 +114,10 @@
     -- | The rule which does the innermost rewrite in this critical pair.
     passive_rule2 :: !(Id params),
     -- | The position of the overlap. See 'Twee.CP.overlap_pos'.
-    passive_pos   :: {-# UNPACK #-} !Int }
+    passive_pos   :: {-# UNPACK #-} !Int32 }
+  deriving Generic
+
+instance Params params => Serialize (Passive params)
 
 instance Params params => Eq (Passive params) where
   x == y = compare x y == EQ
diff -r f9e79bc89c99 src/twee-lib.cabal
--- a/src/twee-lib.cabal	Sun Jul 11 16:26:15 2021 +0200
+++ b/src/twee-lib.cabal	Sun Jul 18 15:05:59 2021 +0200
@@ -81,7 +81,9 @@
     primitive >= 0.7.1.0,
     vector,
     uglymemo,
-    random
+    random,
+    bytestring,
+    cereal
   hs-source-dirs:      .
   ghc-options:         -W -fno-warn-incomplete-patterns
   default-language:    Haskell2010
