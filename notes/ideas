normalise RHS of rewrite rules by ground normalisation?
check why some of the Robbins problems loop
change Symbolic to remove type families (e.g. Symbolic Rule instead of Symbolic (Rule f v))
clean up main file (remove references to I/O, move state-reading stuff out of monad, etc.)
look in ideas/y-inconsistent for interesting example
find out why diff gets so much slower after strengthening rules
take size of top term into account when ordering CPs
allow constraints between variables and constants
Use connectedness to cheaply apply permutative laws!
 ==>    t <- s -> u
 Normalise t and u
 Then pick variable ordering
 Normalise wrt that ordering and the constraint that all
 resulting terms must be less than s
Also use connectedness when simplifying RHS of rules
 ==> allowed to do permutative rewrites as long as RHS < LHS (?)
 ==> store model of RHS vars along with rule

Use following idea from Bachmair:

  "For instance, suppose that all rewrite rules are numbered during
  completion in such a way that no two rules in any system Rn are
  assigned the same number. In addition, a rule is marked once all
  critical pairs with lower-numbered rules have been computed. Let P
  be a critical overlap s <- u -> t and supposed the rules numbered i,
  j, and k, respectively, are applied in the proof steps u -> s, u ->
  t and u -> v. If rule max(i, k) is marked, then all critical pairs
  between the corresponding rules have been computed, so that s and v
  are connected below u. Similarly, if rule max(j, k) is marked, then
  t and v are connected below u."

  As we eagerly add critical pairs, "rule max(i, k) is marked" means:
  rule i is the earlier rule of the two in the critical pair, and rule
  k is an earlier rule than the one from the critical pair. In particular,
  when we generate a critical pair, check that the top term can't be
  reduced by any earlier rule than the one we actually picked. (?)

Questions:
  Do we ever need to do split any more?
  (given that our constraints are always <=)
  Hopefully not, because we don't do it!